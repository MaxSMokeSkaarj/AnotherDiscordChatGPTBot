{"version":3,"sources":["index.mjs","lib/driver.mjs"],"names":[],"mappings":"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","file":"main.mjs","sourcesContent":["import { configDotenv } from 'dotenv';\nconfigDotenv();\nimport GPT from './lib/driver.mjs';\n\n/** \n * Токен бота Discord\n * @type {String}\n*/\nlet DiscordToken = process.env.DiscordToken;\n\n/** \n * Токен OpenAI\n * @type {String}\n*/\nlet OpenAIToken = process.env.OpenAIToken;\n\n/**\n * URL OpenAI\n * @type {String}\n*/\nlet OpenAIURL = process.env.OpenAIURL;\n\n/**\n * Discord channel ID\n * @type {String}\n*/\nlet DiscordChannelID = process.env.DiscordChannelID;\n\n/**\n * Модель поведения бота\n * @type {String}\n*/\nlet ChatGPTModel = process.env.ChatGPTModel;\n\n/**\n * ID чата Discord\n * @type {Number}\n*/\nlet DiscordBotID = Number( process.env.DiscordBotID );\n\n/** \n * Количество Токенов ChatGPT\n * @type {Number}\n*/\nlet BotTokenAmount = Number( process.env.BotTokenAmount );\n\nlet ChatGPT = new GPT( DiscordToken, OpenAIToken, OpenAIURL, DiscordChannelID, ChatGPTModel, DiscordBotID, BotTokenAmount );\nChatGPT.run();\nChatGPT;\n","import { Client, GatewayIntentBits, Partials, AttachmentBuilder } from 'discord.js';\nimport { Configuration, OpenAIApi } from \"openai\";\nimport https from 'https';\nimport fs from 'fs';\n\n/**\n * Основной класс\n*/\nexport default class GPT {\n\n    /**\n     * Конструктор класса, Принимает основные параметры\n     * @param {String} DiscordToken Токен бота Discord\n     * @param {String} OpenAIToken Токен сервера - провайдера AI\n     * @param {String} OpenAIURL URL сервера - провайдера AI\n     * @param {Number} DiscordChannelID  ID канала Discord, в котором будет работать бот\n     * @param {String} ChatGPTModel  Модель поведения бота\n     * @param {Number} DiscordBotID ID бота в Discord\n     * @param {Number} BotTokenAmounts  Количество токенов для сервиса - провайдера AI\n    */\n    constructor ( DiscordToken, OpenAIToken, OpenAIURL, DiscordChannelID, ChatGPTModel, DiscordBotID, BotTokenAmounts ) {\n\n        /**\n         * Токен бота Discord\n         * @type {String}\n        */\n        this.DiscordToken = DiscordToken;\n\n        /**\n         * Токен сервера - провайдера AI\n         * @type {String}\n        */\n        this.OpenAIToken = OpenAIToken;\n\n        /**\n         * URL сервера - провайдера AI\n         * @type {String}\n        */\n        this.OpenAIURL = OpenAIURL;\n\n        /**\n         * ID канала Discord, в котором будет работать бот\n         * @type {Number}\n        */\n        this.DiscordChannelID = DiscordChannelID;\n\n        /**\n         * Модель поведения бота\n         * @type {String}\n        */\n        this.ChatGPTModel = ChatGPTModel;\n\n        /**\n         * ID бота в Discord\n         * @type {Number}\n        */\n        this.DiscordBotID = DiscordBotID;\n\n        /**\n         * Количество токенов для сервиса - провайдера AI\n         * @type {Number}\n        */\n        this.BotTokenAmount = BotTokenAmounts;\n    }\n\n    /**\n     * Скачивание вложений Discord\n     * @param {String} url URL фаила, полученный у Discord\n     * @returns {Promise<String>}\n     */\n    getFile( url ) {\n        return new Promise( ( resolve, reject ) => {\n            https.get( url, ( response ) => {\n                let data = '';\n                response.on( 'data', ( chunk ) => data += chunk );\n                response.on( 'end', () => resolve( data ) );\n            } ).on( 'error', ( error ) => reject( error ) );\n        } );\n    }\n\n    /**\n     * Получение ответа на промпт\n     * @param {String} model Модель поведения бота\n     * @param {Number} max_tokens Количество токенов для сервиса - провайдера AI\n     * @param {Array<Object>} history История переписки\n     * @returns {Promise<String>}\n    */\n    async getChatGPTAnswer( model, max_tokens, history ) {\n        return new Promise( async ( res, rej ) => {\n            const configuration = new Configuration( { apiKey: this.OpenAIToken, basePath: this.OpenAIURL } );\n            const openai = new OpenAIApi( configuration );\n            let resp = await openai.createChatCompletion( {\n                model: model, temperature: 0.6, max_tokens: max_tokens, messages: [\n                    {\n                        role: 'system',\n                        content: \"\"\n                    },\n                    ...history\n                ]\n            } );\n            res( resp );\n        } );\n    }\n\n    /**\n     * Обработчик\n    */\n    async run() {\n\n        /** Экземпляр клиента Discord    */\n        const client = new Client( {\n            intents: [\n                GatewayIntentBits.Guilds,\n                GatewayIntentBits.GuildInvites,\n                GatewayIntentBits.GuildMembers,\n                GatewayIntentBits.GuildMessages,\n                GatewayIntentBits.GuildMessageReactions,\n                GatewayIntentBits.GuildMessageTyping,\n                GatewayIntentBits.GuildEmojisAndStickers,\n                GatewayIntentBits.GuildIntegrations,\n                GatewayIntentBits.GuildModeration,\n                GatewayIntentBits.GuildPresences,\n                GatewayIntentBits.GuildVoiceStates,\n                GatewayIntentBits.MessageContent,\n                GatewayIntentBits.DirectMessages,\n                GatewayIntentBits.DirectMessageTyping,\n                GatewayIntentBits.DirectMessageReactions\n            ],\n            partials: [\n                Partials.Channel,\n                Partials.Message,\n                Partials.User,\n                Partials.GuildMember,\n                Partials.Reaction,\n                Partials.ThreadMember\n            ]\n        } );\n\n        // Готовность\n        client.on( 'ready', () => {\n            console.log( `Logged in as ${ client.user.tag }` );\n        } );\n\n        /**\n        * История сообщений\n        * @type {Array}\n        */\n        let MessageHistory = JSON.parse( fs.readFileSync( './json/history.json' ).toString() );\n\n        // Подключаемся к событию \"message\" Discord клиента\n        client.on( \"messageCreate\", async ( message ) => {\n\n            if ( message.content == \"!очистить историю\" ) // проверка на команду очистки памяти\n            {\n                MessageHistory = [];\n                fs.writeFileSync( './json/history.json', JSON.stringify( MessageHistory, '\\n', 4 ) );\n                message.reply( \"История очищена!\" );\n                return;\n            }\n\n            let attachmentURL = message.attachments.toJSON()[ 0 ].url;\n            let attachment = attachmentURL ? await this.getFile( attachmentURL ) : undefined; // проблема с получением фаила решена довольно просто\n            if ( attachment ) message.content += \"```\\n\" + attachment + \"\\n\"; // при наличии вложения добавлять его содержимое в конец запроса. Проверки на тип нет, по этому все другие вложения он пытается добавить как бинарную информацию, позже починю\n            if ( message.channel.id != this.DiscordChannelID ) return; // Обработка канала дс\n\n            let role = ( message.author.id == client.user.id ) ? 'assistant' : 'user';\n            MessageHistory.push( { role: role, content: message.content, name: message.author.username.replace( /\\s+/g, '_' ).replace( /[^\\w\\s]/gi, '' ) } );\n            if ( MessageHistory.length > 10 ) MessageHistory.shift();\n            fs.writeFileSync( './json/history.json', JSON.stringify( MessageHistory, '\\n', 4 ) );\n            if ( message.author.id == client.user.id ) return;  // Фильтр на ответ самому себе\n\n            await message.channel.sendTyping();\n\n            // Генерируем ответ с использованием ChatGPT\n            let response = await this.getChatGPTAnswer( this.ChatGPTModel, this.BotTokenAmount, MessageHistory ).catch( ( e ) => {\n                message.reply( e );\n                return;\n            } );\n            response = response.data.choices[ 0 ].message.content;\n\n            // Отправляем ответ в Discord канал\n            if ( response.length < 2000 ) message.reply( response );\n            else {\n\n                //let attachment = new MessageAttachment( Buffer.from( response ), 'message.txt' );\n                let attachment = new AttachmentBuilder( Buffer.from( response ), { name: 'message.txt' } );\n                message.reply( { files: [ attachment ] } );\n            }\n                \n        } );\n\n        // Запускаем Discord бота\n        client.login( this.DiscordToken );\n    }\n}\n"]}